!<arch>
0-isupper.c/    0           0     0     644     213       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - check the code.
 *
 * @c: the character value
 * Return: Always 0.
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}


0-memset.c/     0           0     0     644     303       `
#include "main.h"

/**
 * _memset - memset function
 * @s: start point of string to change
 * @b: value that will replace
 * @n: number of bytes to change
 * Return: changed pointer
 */

char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	for (; n != 0; p++, n--)
		*p = b;
	return (s);
}


0-strcat.c/     0           0     0     644     360       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: first string to be added to
 * @src: second string to be added
 * Return: concatenated string
 */

char *_strcat(char *dest, char *src)
{
	char *temp = dest;

	for (; *temp != '\0'; temp++)
		;
	for (; *src != '\0'; src++)
	{
		*temp = *src;
		temp++;
	}
	*temp = *src;
	return (dest);
}

100-atoi.c/     0           0     0     644     658       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted to integer
 * Return: integers in a string
 */

int _atoi(char *s)
{
	int num, len, numcount, mult, x, neg;

	len = 0;
	x = 0;
	numcount = 0;
	mult = 1;
	neg = 1;
	num = 0;

	while (s[len] != '\0')
	{
		if (s[len] >= '0' && s[len] <= '9')
		{
			numcount++;
			if (!(s[len + 1] >= '0' && s[len + 1] <= '9'))
				break;
		}
		len++;
	}
	for (; numcount > 1; numcount--)
		mult *= 10;
	for (; x <= len; x++)
	{
		if (s[x] == '-')
			neg *= -1;
		else if (s[x] <= '9' && s[x] >= '0')
		{
			num += (s[x] - '0') * mult * neg;
			mult /= 10;
		}
	}
	return (num);
}

1-isdigit.c/    0           0     0     644     213       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - check the code.
 *
 * @c: the character value
 * Return: Always 0.
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}


1-memcpy.c/     0           0     0     644     363       `
#include "main.h"

/**
 * _memcpy - memset function
 * @dest: start point of string to change
 * @src: value that will replace
 * @n: number of bytes to change
 * Return: changed pointer
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *dest1 = dest;
	char *src1 = src;

	for (; n != 0; dest1++, n--, src1++)
		*dest1 = *src1;
	return (dest);
}


1-strncat.c/    0           0     0     644     453       `
#include "main.h"

/**
 * _strncat - concatenates two strings only taking n bytes from src
 * @dest: first string to be added to
 * @src: second string to be added
 * @n: number of bites to use from src
 * Return: concatenated string
 */

char *_strncat(char *dest, char *src, int n)
{
	char *temp = dest;

	for (; *temp != '\0'; temp++)
		;
	for (; *src != '\0'; src++)
	{
		if (n == 0)
			break;
		*temp = *src;
		temp++;
		n--;
	}
	return (dest);
}


2-strchr.c/     0           0     0     644     348       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: pointer where we search for charachter
 * @c: character we search for
 * Return: NULL if character is not found, return pointer
 */

char *_strchr(char *s, char c)
{
	char *s1 = s - 1;

	do {
		s1++;
		if (*s1 == c)
			return (s1);
	} while (*s1 != '\0');

	return (0);
}

2-strlen.c/     0           0     0     644     218       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: the length of any string
 */

int _strlen(char *s)
{
	int i;

	i = 0;
	while (*s != '\0')
	{
		s++;
		i++;
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     456       `
#include "main.h"

/**
 * _strncpy - copy two strings only taking n bytes from src
 * @dest: first string to be added to
 * @src: second string to be added
 * @n: number of bites to use from src
 * Return: concatenated string
 */

char *_strncpy(char *dest, char *src, int n)
{
	char *temp = dest;

	for (; n != 0 && *src != '\0'; n--, src++)
	{
		*temp = *src;
		temp++;
	}
	for (; n != 0 && *temp != '\0'; n--, temp++)
		*temp = '\0';
	return (dest);
}

3-islower.c/    0           0     0     644     269       `
#include "main.h"

/**
 * _islower - checks if input is lowercase
 * @c: variable to determine if input is lowercase
 * main - check the code.
 *
 * Return: Always 0.
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}


3-puts.c/       0           0     0     644     189       `
#include "main.h"
/**
 * _puts - prints a string
 * @str: string
 */

void _puts(char *str)
{
	int i;

	i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}


3-strcmp.c/     0           0     0     644     382       `
#include "main.h"
#include <stdio.h>

/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 * Return: size difference of strings
 */

int _strcmp(char *s1, char *s2)
{
	int count = 0;

	while (*(s1 + count) != '\0' || *(s2 + count) != '\0')
	{
		if (*(s1 + count) != *(s2 + count))
			return (*(s1 + count) - *(s2 + count));
		count++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     477       `
#include "main.h"
#include <stdio.h>

/**
 * _strspn - gets the length of a prefix substring
 * @s: pointer to a char, string that will be checked
 * @accept: pointer to the substring we check for
 * Return: unsigned int, length of a prefix substring
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0, x, i;

	for (x = 0; s[x] != '\0' && x == count; x++)
		for (i = 0; accept[i] != '\0'; i++)
			if (s[x] == accept[i])
				count++;

	return (count);
}

4-isalpha.c/    0           0     0     644     296       `
#include "main.h"

/**
 * _isalpha - checks if input is alphacase
 * @c: variable to determine if input is alphacase
 * main - check the code.
 *
 * Return: Always 0.
 */
int _isalpha(int c)
{
	int i;

	i = 0;

if (c >= 'a' && c <= 'z')
i = 1;
else if (c >= 'A' && c <= 'Z')
i = 1;
return (i);
}
4-strpbrk.c/    0           0     0     644     424       `
#include "main.h"

/**
 * _strpbrk - locates a character in a string
 * @s: pointer where we search for charachter
 * @accept: character we search for
 * Return: NULL if character is not found, return pointer
 */

char *_strpbrk(char *s, char *accept)
{
	char *s1 = s - 1;
	int i;

	do {
		s1++;
		for (i = 0; *(accept + i) != '\0'; i++)
			if (*s1 == *(accept + i))
				return (s1);
	} while (*s1 != '\0');

	return (0);
}
5-strstr.c/     0           0     0     644     538       `
#include "main.h"

/**
 * _strstr - locates a character in a string
 * @haystack: pointer where we search for charachter
 * @needle: character we search for
 * Return: NULL if character is not found, return pointer
 */

char *_strstr(char *haystack, char *needle)
{
	char *s1 = haystack - 1;
	int len, count;

	for (len = 0; *(needle + len); len++)
		;

	do {
		s1++;
		for (count = 0; count < len; count++)
			if (*(s1 + count) != *(needle + count))
				break;
		if (count == len)
			return (s1);
	} while (*s1 != '\0');

	return (0);
}
6-abs.c/        0           0     0     644     226       `
#include "main.h"

/**
 * _abs - determine the absolute value of an integer
 * @i: variable to determine the absolute value of an integer
 * Return: i if succesful
 */

int _abs(int i)
{
	if (i < 0)
		i *= -1;

	return (i);
}
9-strcpy.c/     0           0     0     644     369       `
#include "main.h"

/**
 * *_strcpy - copy the string pointed by src, to the buffer pointed to by dest
 * @dest: char pointer 1
 * @src: char pointer 2
 * Return: dest pointer
 */

char *_strcpy(char *dest, char *src)
{
	int len, count;

	len = 0;

	while (src[len] != '\0')
		len++;
	for (count = 0; count <= len; count++)
		dest[count] = src[count];
	return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

